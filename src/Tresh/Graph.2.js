import { Dimensions, SafeAreaView, StyleSheet, TextInput, ImageBackground } from 'react-native'
import React, { Component } from 'react';
import { Container, Header, Animated, Content, Button, Text, StyleProvider, Left, Right, Icon, Body, Title, View } from 'native-base';
import firebase from 'react-native-firebase';
import CircularSlider from 'rn-circular-slider'
import getTheme from '../../native-base-theme/components';
import material from '../../native-base-theme/variables/commonColor';
import * as shape from 'd3-shape';
import {
  scaleTime,
  scaleLinear,
  scaleQuantile,
} from 'd3-scale';

import Svg,{
  Circle,
  Ellipse,
  G,
  TSpan,
  TextPath,
  Path,
  Polygon,
  Polyline,
  Line,
  Rect,
  Use,
  Image,
  Symbol,
  Defs,
  LinearGradient,
  RadialGradient,
  Stop,
  ClipPath,
  Pattern,
  Mask,
} from 'react-native-svg';


const base = firebase.database().ref().child('tables/growth');


const d3 = {
  shape,
};






export default class App extends React.Component {
  static navigationOptions = {
    title: 'Main',
  };

 /* constructor(props) {
    super(props);
    this.state = {
      labels: [],
      datasets: [{
        data: [],
      }, {
        data: []
      }/*, {
        data: []
      }, {
        data: []
      }, {
        data: []
      },
      ],
      loading: false,
    }
  }*/

 /* componentDidMount() {
    base.on('value', (data) => {
      var scores = data.val();
         var keys = Object.keys(scores);

      this.setState({
        scores: scores[0],
        keys: scores[0],
        data: keys[1], scores[1]
          color: (opacity = 1) => `red` // optional
         , {
          data: scores[2],
          color: (opacity = 1) => `yellow` // optional
        },
        {
          data: scores[3],
          color: (opacity = 1) => `green` // optional
        },
        {
          data: scores[4],
          color: (opacity = 1) => `yellow` // optional
        },
        {
          data: scores[5],
          color: (opacity = 1) => `#ffcf00` // optional
        },
        ],
      });
    });
  }
*/
  renderTabBar() {
    return
  }
  render() {
    const width = Dimensions.get('window').width
    const { navigate } = this.props.navigation;
    return (
      <StyleProvider style={getTheme(material)}>
        <Container>
        <ImageBackground source={{uri: 'http://amboff.indiit.com/vehicleinspections/assets/images/theapp.jpg'}} style={{width: '100%', height: '100%'}}>
        <Header style={{backgroundColor: 'transparent'}}>
            <Left>
              <Button transparent onPress={() => navigate('Main')}>
                <Icon name='arrow-back' />
              </Button>
            </Left>
            <Body>
              <Title>Header</Title>
            </Body>
            <Right>
              <Button transparent>
                <Icon name='menu' />
              </Button>
            </Right>
          </Header>
          <View style={{ flex: 1, flexDirection: 'column'}}>
          <View>
          <Svg
    width="500"
    height="50"
    fill="white"
    stroke="white"
    color="green"
>

                    <Path d="M49.296,16.672 L47.424,16.672 L47.424,7.648 L41.872,7.648 L41.872,16.672 L40,16.672 L40,6 L49.296,6 L49.296,16.672 Z M55.88,16.864 C54.904,16.864 54.024,16.432 53.4,15.6 L53.4,19.616 L51.72,19.616 L51.72,8.944 L53.4,8.944 L53.4,10 C53.976,9.232 54.872,8.752 55.88,8.752 C57.88,8.752 59.304,10.256 59.304,12.8 C59.304,15.344 57.88,16.864 55.88,16.864 Z M55.384,15.376 C56.712,15.376 57.56,14.304 57.56,12.8 C57.56,11.312 56.712,10.24 55.384,10.24 C54.6,10.24 53.768,10.704 53.4,11.28 L53.4,14.336 C53.768,14.896 54.6,15.376 55.384,15.376 Z M64.656,16.864 C62.208,16.864 60.688,15.024 60.688,12.8 C60.688,10.592 62.208,8.752 64.656,8.752 C67.136,8.752 68.64,10.592 68.64,12.8 C68.64,15.024 67.136,16.864 64.656,16.864 Z M64.656,15.376 C66.096,15.376 66.896,14.176 66.896,12.8 C66.896,11.44 66.096,10.24 64.656,10.24 C63.232,10.24 62.432,11.44 62.432,12.8 C62.432,14.176 63.232,15.376 64.656,15.376 Z M74.048,18.64 L74.048,15.28 C74.704,15.12 75.072,14.736 75.328,12.704 L75.792,8.944 L81.76,8.944 L81.76,15.2 L82.608,15.2 L82.608,18.64 L80.928,18.64 L80.928,16.672 L75.728,16.672 L75.728,18.64 L74.048,18.64 Z M77.28,10.416 L77.008,12.896 C76.896,13.968 76.528,14.72 75.984,15.2 L80.08,15.2 L80.08,10.416 L77.28,10.416 Z M87.672,16.864 C85.224,16.864 83.704,15.024 83.704,12.8 C83.704,10.592 85.224,8.752 87.672,8.752 C90.152,8.752 91.656,10.592 91.656,12.8 C91.656,15.024 90.152,16.864 87.672,16.864 Z M87.672,15.376 C89.112,15.376 89.912,14.176 89.912,12.8 C89.912,11.44 89.112,10.24 87.672,10.24 C86.248,10.24 85.448,11.44 85.448,12.8 C85.448,14.176 86.248,15.376 87.672,15.376 Z M100.32,16.672 L98.432,16.672 L96.432,13.824 L94.416,16.672 L92.544,16.672 L95.376,12.704 L92.704,8.944 L94.592,8.944 L96.432,11.568 L98.256,8.944 L100.144,8.944 L97.472,12.704 L100.32,16.672 Z M105.176,16.864 C102.728,16.864 101.208,15.024 101.208,12.8 C101.208,10.592 102.728,8.752 105.176,8.752 C107.656,8.752 109.16,10.592 109.16,12.8 C109.16,15.024 107.656,16.864 105.176,16.864 Z M105.176,15.376 C106.616,15.376 107.416,14.176 107.416,12.8 C107.416,11.44 106.616,10.24 105.176,10.24 C103.752,10.24 102.952,11.44 102.952,12.8 C102.952,14.176 103.752,15.376 105.176,15.376 Z M110.256,18.64 L110.256,15.28 C110.912,15.12 111.28,14.736 111.536,12.704 L112,8.944 L117.968,8.944 L117.968,15.2 L118.816,15.2 L118.816,18.64 L117.136,18.64 L117.136,16.672 L111.936,16.672 L111.936,18.64 L110.256,18.64 Z M113.488,10.416 L113.216,12.896 C113.104,13.968 112.736,14.72 112.192,15.2 L116.288,15.2 L116.288,10.416 L113.488,10.416 Z M120.392,8.944 L122.072,8.944 L122.072,11.744 L124.808,11.744 C126.52,11.744 127.368,12.88 127.368,14.208 C127.368,15.536 126.472,16.672 124.808,16.672 L120.392,16.672 L120.392,8.944 Z M124.6,13.216 L122.072,13.216 L122.072,15.2 L124.6,15.2 C125.272,15.2 125.656,14.784 125.656,14.208 C125.656,13.632 125.272,13.216 124.6,13.216 Z M130.216,16.672 L128.536,16.672 L128.536,8.944 L130.216,8.944 L130.216,16.672 Z" id="Про-доходы" fill="#202020"/>
                        <Path d="M17.6415306,18.5489362 C17.6415306,18.1082834 17.9955911,17.7510638 18.4323469,17.7510638 L25.0752041,17.7510638 L25.0752041,6.06382979 L10.7139796,6.06382979 L10.7139796,8.84361702 C10.7139796,9.28426975 10.3599191,9.64148936 9.92316327,9.64148936 C9.48640747,9.64148936 9.13234694,9.28426975 9.13234694,8.84361702 L9.13234694,5.8787234 C9.13582989,5.09861802 9.7636224,4.46807719 10.5368367,4.46808511 L25.265,4.46808511 C26.0406783,4.46808511 26.6694898,5.10250714 26.6694898,5.88510638 L26.6694898,17.9297872 C26.6694898,18.7123865 26.0406783,19.3468085 25.265,19.3468085 L18.4323469,19.3468085 C17.9955911,19.3468085 17.6415306,18.9895889 17.6415306,18.5489362 Z M28.9786735,0.277659574 L6.83581633,0.277659574 C5.72019079,0.279416923 4.8162316,1.19144163 4.8144898,2.31702128 L4.8144898,9.25531915 C4.81448979,9.54037149 4.96521853,9.80377071 5.20989795,9.94629688 C5.45457738,10.0888231 5.75603487,10.0888231 6.00071429,9.94629688 C6.24539372,9.80377071 6.39612246,9.54037149 6.39612245,9.25531915 L6.39612245,2.31702128 C6.39612245,2.07201836 6.5929801,1.87340426 6.83581633,1.87340426 L28.9786735,1.87340426 C29.2215097,1.87340426 29.4183673,2.07201836 29.4183673,2.31702128 L29.4183673,21.4946809 C29.4183673,21.7396838 29.2215097,21.9382979 28.9786735,21.9382979 L25.8944898,21.9382979 C25.457734,21.9382979 25.1036735,22.2955175 25.1036735,22.7361702 L25.1036735,24.0893617 C25.1036785,24.3912888 24.862007,24.6365425 24.5627551,24.6382979 L21.8518367,24.6382979 C21.5525848,24.6365425 21.3109133,24.3912888 21.3109184,24.0893617 L21.3109184,22.7361702 C21.3109184,22.2955175 20.9568578,21.9382979 20.520102,21.9382979 L17.9009184,21.9382979 C17.4641626,21.9382979 17.110102,22.2955175 17.110102,22.7361702 C17.110102,23.1768229 17.4641626,23.5340426 17.9009184,23.5340426 L19.7261224,23.5340426 L19.7261224,24.0893617 C19.7261212,25.272591 20.6759094,26.2322818 21.8486735,26.2340426 L24.5595918,26.2340426 C25.7323559,26.2322818 26.6821442,25.272591 26.6821429,24.0893617 L26.6821429,23.5340426 L28.9723469,23.5340426 C29.5092752,23.5348897 30.0245458,23.3205047 30.4048046,22.93805 C30.7850635,22.5555954 30.9991617,22.0363998 31,21.4946809 L31,2.31702128 C30.9982582,1.19144163 30.094299,0.279416923 28.9786735,0.277659574 Z M17.5909184,11.6744681 C17.5909184,10.0881183 18.8655363,8.80212766 20.4378571,8.80212766 C22.010178,8.80212766 23.2847959,10.0881183 23.2847959,11.6744681 C23.2847959,13.2608179 22.010178,14.5468085 20.4378571,14.5468085 C18.8680075,14.5432888 17.597241,13.2583285 17.5972449,11.6744681 L17.5909184,11.6744681 Z M19.172551,11.6744681 C19.172551,12.3795124 19.7390479,12.9510638 20.4378571,12.9510638 C21.1366664,12.9510638 21.7031633,12.3795124 21.7031633,11.6744681 C21.7031633,10.9694237 21.1366664,10.3978723 20.4378571,10.3978723 C19.7415198,10.4013851 19.1788688,10.9719089 19.1788776,11.6744681 L19.172551,11.6744681 Z M0.0221428571,15.4755319 C0.0221428571,14.9712766 0.041122449,14.4797872 0.041122449,14.0106383 C0.041122449,13.5699856 0.395182978,13.212766 0.831938776,13.212766 C3.65357143,13.212766 5.70969388,12.4308511 7.49693878,10.6755319 C7.8040531,10.3735083 8.29380404,10.3735083 8.60091837,10.6755319 C10.3881633,12.4308511 12.4442857,13.212766 15.2659184,13.212766 C15.7026742,13.212766 16.0567347,13.5699856 16.0567347,14.0106383 C16.0567347,14.4797872 16.0567347,14.9680851 16.0757143,15.4755319 C16.167449,20.2914894 16.2908163,26.8882979 8.30673469,29.6808511 C8.13872891,29.7397046 7.95596497,29.7397046 7.78795918,29.6808511 C-0.196122449,26.8882979 -0.0695918367,20.2914894 0.0221428571,15.4755319 Z M8.04734694,28.0851064 C14.6902041,25.6276596 14.5826531,20.256383 14.4940816,15.5138298 C14.4940816,15.2712766 14.4940816,15.0319149 14.4940816,14.7957447 C11.9191837,14.6648936 9.84408163,13.8702128 8.06316327,12.3351064 C6.27908163,13.8702128 4.20397959,14.6648936 1.6322449,14.7957447 C1.6322449,15.0319149 1.6322449,15.2712766 1.6322449,15.5138298 C1.51204082,20.25 1.41081633,25.6212766 8.04734694,28.0851064 Z M5.1055102,20.8308511 C5.67584745,21.1627766 6.14937723,21.6405314 6.47836735,22.2159574 C6.61353921,22.4527422 6.85941101,22.6032675 7.13,22.6148936 L7.16479592,22.6148936 C7.42327779,22.6148275 7.66541368,22.4873167 7.81326531,22.2734043 C8.68843991,21.000562 9.78223074,19.8959311 11.0429592,19.0117021 C11.2752001,18.8492223 11.4038841,18.5740802 11.3805373,18.2899193 C11.3571904,18.0057583 11.1853596,17.7557493 10.9297719,17.6340682 C10.6741842,17.5123871 10.3736694,17.5375202 10.1414286,17.7 C9.0268245,18.48123 8.02689212,19.4170256 7.17112245,20.4797872 C6.80443818,20.0716476 6.37767294,19.7228834 5.90581633,19.4457447 C5.66100299,19.3009433 5.35805782,19.2995878 5.11198112,19.4421927 C4.86590443,19.5847975 4.71442702,19.8494973 4.71505089,20.1358099 C4.71567475,20.4221224 4.86830423,20.6861477 5.115,20.8276596 L5.1055102,20.8308511 Z" id="Shape"/>

</Svg>
            </View>
            <View>
              <CircularSlider
                startAngle={this.state.startAngle}
                angleLength={this.state.angleLength}
                onUpdate={({ startAngle, angleLength }) => this.setState({ startAngle, angleLength })}
                segments={5}
                strokeWidth={40}
                radius={width * 0.3}
              />
            </View>
            <View>
              <Body>
                <Button rounded success>
                  <Text>Добавить</Text>
                </Button>
              </Body>
            </View>
          </View>
          </ImageBackground>
        </Container>
      </StyleProvider>
    )

  }
}